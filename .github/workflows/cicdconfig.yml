name: Docker Image CI

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: DOCKER_USERNAME
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Print all environment variables
        run: printenv

      # Step 3: Set up AWS CLI and authenticate to Amazon ECR
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          echo "Logging in to Amazon ECR"
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws/t5x3g0l1/careercon/client-react

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t public.ecr.aws/t5x3g0l1/careercon/client-react:latest .
          docker tag public.ecr.aws/t5x3g0l1/careercon/client-react:latest public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}

      # Step 6: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push public.ecr.aws/t5x3g0l1/careercon/client-react:latest
          docker push public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}

      # Step 7: Update ECS service to use the new image
      - name: Update ECS service with new image
        run: |
          echo "Updating ECS service to use the new image"

          # Register a new ECS task definition with the new image
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)

          # Create a new revision of the task definition with the updated image
          UPDATED_TASK_DEFINITION=$(aws ecs register-task-definition \
            --family ${{ secrets.ECS_FAMILY_NAME }} \
            --container-definitions "$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition.containerDefinitions' --output json | jq '.[0] | .image = \"public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}\"')")

          # Get the new revision ARN of the task definition
          NEW_TASK_DEFINITION_ARN=$(echo $UPDATED_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')

          # Update the ECS service to use the new task definition
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $NEW_TASK_DEFINITION_ARN \
            --force-new-deployment
