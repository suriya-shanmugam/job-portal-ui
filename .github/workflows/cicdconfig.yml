name: Docker Image CI

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: DOCKER_USERNAME
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Print environment variables for debugging
      - name: Print all environment variables
        run: printenv

      # Step 4: Log in to Docker Hub (for pushing images)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t public.ecr.aws/t5x3g0l1/careercon/client-react:latest .
          docker tag public.ecr.aws/t5x3g0l1/careercon/client-react:latest public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}

      # Step 6: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Push Docker image to Amazon ECR
      - name: Push Docker image to ECR
        run: |
          docker push public.ecr.aws/t5x3g0l1/careercon/client-react:latest
          docker push public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}

      # Step 8: Update ECS service to use the new image
      - name: Update ECS service with new image
        run: |
          echo "Updating ECS service to use the new image"

          # Retrieve the current task definition ARN
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)

          # Retrieve the current task definition JSON (container definitions included)
          CONTAINER_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition.containerDefinitions' --output json)

          # Update the container definition with the new image and required memory settings
          UPDATED_CONTAINER_DEFINITION=$(echo "$CONTAINER_DEFINITION" | jq \
            --arg IMAGE "public.ecr.aws/t5x3g0l1/careercon/client-react:${GITHUB_SHA}" \
            '.[] | .image = $IMAGE | .memory = 512 | .memoryReservation = 512')

          # Register the new task definition with updated image and memory settings
          REGISTERED_TASK_DEFINITION=$(aws ecs register-task-definition \
            --family ${{ secrets.ECS_FAMILY_NAME }} \
            --container-definitions "$(echo "$UPDATED_CONTAINER_DEFINITION" | jq -c '.')")

          # Extract the new task definition ARN
          NEW_TASK_DEFINITION_ARN=$(echo $REGISTERED_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')

          # Update the ECS service to use the new task definition
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $NEW_TASK_DEFINITION_ARN \
            --force-new-deployment
